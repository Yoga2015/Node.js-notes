## os模块、path模块 、url模块、querystring模块 



### os模块

`os` 模块提供了一些基本的系统操作函数。 可以使用以下方式访问它：

```js
const os = require('os');
```

**案例：**获取系统信息

```javascript
var os = require('os');

console.log("操作系统的主机名"+os.hostname());
console.log("操作系统名 "+os.type());
console.log("操作系统 CPU 架构 "+os.arch());
console.log("操作系统的发行版本  "+os.release());
console.log('系统内存总量 : ' + os.totalmem() + " bytes.");
```
![image](https://user-images.githubusercontent.com/94358089/178009581-461fa221-2911-46e8-b334-0ed3e5921066.png)



实际开发项目时，需要引入一些依赖的模块 来才能完整地制作项目。

### 内置模块 - path

用于处理文件和目录的路径

```javascript
var path = require('path');   //引入path模块
```

**基本语法**

```
path.basename()；	获取文件
path.dirname();	获取路径
path.extname();	获取后缀
path.join();	合并目录
path.resolve();	合并目录（自带解析）
```

**案例：** 解析路径

```javascript
const path = require("path");

const pathAdress = path.parse('/home/user/dir/file.txt');

console.log(pathAdress)
```

![image](https://user-images.githubusercontent.com/94358089/178009605-20798a02-a6ec-45a8-9324-1e14b3ed241f.png)


### 内置模块 - url

```javascript
var url = require('url');    //引入URL内置模块
```

 **基本语法**

| url.parse(地址 ，true) ； | 获取参数 |
| ------------------------- | -------- |

**案例：**获取地址的信息

```javascript
const url = require("url");

const urlString = url.parse("https://www.npmjs.com/package/url");

console.log(urlString);
```

![image](https://user-images.githubusercontent.com/94358089/178009645-f62527fd-3c9c-4769-aaee-716ba2c479d8.png)



### querystring模块   (已弃用)

`querystring` 模块提供了一些实用函数，用于解析与格式化 URL 查询字符串。querystring从字面上的意思就是查询字符串，一般是对http请求所带的数据进行解析。querystring模块只提供4个方法,分别是 querystring.parse、querystring.stringify、querystring.escape 和 querystring.unescape。

首先，使用querystring模块之前，需要require进来：

```typescript
const querystring = require("querystring");
```

其次，就可以使用模块下的方法了：

```javascript
//parse这个方法是将一个字符串反序列化为一个对象。
querystring.parse(str,separator,eq,options)**

//stringify这个方法是将一个对象序列化成一个字符串，与querystring.parse相对。
querystring.stringify(obj,separator,eq,options)

//escape可使传入的字符串进行编码
querystring.escape(str) 

//unescape方法可将含有%的字符串进行解码
querystring.unescape(str)
```

**querystring 将替换为 querystringify**。

